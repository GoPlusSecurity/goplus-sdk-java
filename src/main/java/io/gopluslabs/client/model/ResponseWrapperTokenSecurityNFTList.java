/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.gopluslabs.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ResponseWrapperTokenSecurityNFTList
 */



public class ResponseWrapperTokenSecurityNFTList {
  @SerializedName("NFT_percentage")
  private String nfTPercentage = null;

  @SerializedName("NFT_id")
  private String nfTId = null;

  @SerializedName("amount")
  private String amount = null;

  @SerializedName("in_effect")
  private String inEffect = null;

  @SerializedName("value")
  private String value = null;

  public ResponseWrapperTokenSecurityNFTList nfTPercentage(String nfTPercentage) {
    this.nfTPercentage = nfTPercentage;
    return this;
  }

   /**
   * \&quot;NFT_percentage\&quot; represents the proportion of that NFT in the total liquidity. When the LP holder is a lockup address, this information will also appear in the \&quot;locked_detail\&quot; section.
   * @return nfTPercentage
  **/
  @Schema(description = "\"NFT_percentage\" represents the proportion of that NFT in the total liquidity. When the LP holder is a lockup address, this information will also appear in the \"locked_detail\" section.")
  public String getNfTPercentage() {
    return nfTPercentage;
  }

  public void setNfTPercentage(String nfTPercentage) {
    this.nfTPercentage = nfTPercentage;
  }

  public ResponseWrapperTokenSecurityNFTList nfTId(String nfTId) {
    this.nfTId = nfTId;
    return this;
  }

   /**
   * \&quot;NFT_id\&quot; is the NFTID corresponding to that NFT. 
   * @return nfTId
  **/
  @Schema(description = "\"NFT_id\" is the NFTID corresponding to that NFT. ")
  public String getNfTId() {
    return nfTId;
  }

  public void setNfTId(String nfTId) {
    this.nfTId = nfTId;
  }

  public ResponseWrapperTokenSecurityNFTList amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * \&quot;amount\&quot; is the liquidity quantity corresponding to the NFT.
   * @return amount
  **/
  @Schema(description = "\"amount\" is the liquidity quantity corresponding to the NFT.")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public ResponseWrapperTokenSecurityNFTList inEffect(String inEffect) {
    this.inEffect = inEffect;
    return this;
  }

   /**
   * \&quot;in_effect\&quot; indicates whether the liquidity corresponding to that NFT is effective at the current price. 
   * @return inEffect
  **/
  @Schema(description = "\"in_effect\" indicates whether the liquidity corresponding to that NFT is effective at the current price. ")
  public String getInEffect() {
    return inEffect;
  }

  public void setInEffect(String inEffect) {
    this.inEffect = inEffect;
  }

  public ResponseWrapperTokenSecurityNFTList value(String value) {
    this.value = value;
    return this;
  }

   /**
   * \&quot;value\&quot; is the total USD value corresponding to the NFT.
   * @return value
  **/
  @Schema(description = "\"value\" is the total USD value corresponding to the NFT.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseWrapperTokenSecurityNFTList responseWrapperTokenSecurityNFTList = (ResponseWrapperTokenSecurityNFTList) o;
    return Objects.equals(this.nfTPercentage, responseWrapperTokenSecurityNFTList.nfTPercentage) &&
        Objects.equals(this.nfTId, responseWrapperTokenSecurityNFTList.nfTId) &&
        Objects.equals(this.amount, responseWrapperTokenSecurityNFTList.amount) &&
        Objects.equals(this.inEffect, responseWrapperTokenSecurityNFTList.inEffect) &&
        Objects.equals(this.value, responseWrapperTokenSecurityNFTList.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nfTPercentage, nfTId, amount, inEffect, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseWrapperTokenSecurityNFTList {\n");
    
    sb.append("    nfTPercentage: ").append(toIndentedString(nfTPercentage)).append("\n");
    sb.append("    nfTId: ").append(toIndentedString(nfTId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    inEffect: ").append(toIndentedString(inEffect)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.gopluslabs.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Contains the metadata information of the token.
 */
@Schema(description = "Contains the metadata information of the token.")


public class ResponseWrapperSolanaTokenSecurityMetadata {
  @SerializedName("symbol")
  private String symbol = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("uri")
  private String uri = null;

  public ResponseWrapperSolanaTokenSecurityMetadata symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Symbol of the token.
   * @return symbol
  **/
  @Schema(description = "Symbol of the token.")
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public ResponseWrapperSolanaTokenSecurityMetadata name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the token.
   * @return name
  **/
  @Schema(description = "Name of the token.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ResponseWrapperSolanaTokenSecurityMetadata description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the token.
   * @return description
  **/
  @Schema(description = "Description of the token.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ResponseWrapperSolanaTokenSecurityMetadata uri(String uri) {
    this.uri = uri;
    return this;
  }

   /**
   * URI pointing to related token information.
   * @return uri
  **/
  @Schema(description = "URI pointing to related token information.")
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseWrapperSolanaTokenSecurityMetadata responseWrapperSolanaTokenSecurityMetadata = (ResponseWrapperSolanaTokenSecurityMetadata) o;
    return Objects.equals(this.symbol, responseWrapperSolanaTokenSecurityMetadata.symbol) &&
        Objects.equals(this.name, responseWrapperSolanaTokenSecurityMetadata.name) &&
        Objects.equals(this.description, responseWrapperSolanaTokenSecurityMetadata.description) &&
        Objects.equals(this.uri, responseWrapperSolanaTokenSecurityMetadata.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, name, description, uri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseWrapperSolanaTokenSecurityMetadata {\n");
    
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.gopluslabs.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gopluslabs.client.model.SolanaTxAssetChange;
import io.gopluslabs.client.model.SolanaTxSolChange;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * SolanaTxAssetChanges
 */



public class SolanaTxAssetChanges {
  @SerializedName("nft_changes")
  private List<SolanaTxAssetChange> nftChanges = null;

  @SerializedName("token_changes")
  private List<SolanaTxAssetChange> tokenChanges = null;

  @SerializedName("sol_changes")
  private List<SolanaTxSolChange> solChanges = null;

  public SolanaTxAssetChanges nftChanges(List<SolanaTxAssetChange> nftChanges) {
    this.nftChanges = nftChanges;
    return this;
  }

  public SolanaTxAssetChanges addNftChangesItem(SolanaTxAssetChange nftChangesItem) {
    if (this.nftChanges == null) {
      this.nftChanges = new ArrayList<SolanaTxAssetChange>();
    }
    this.nftChanges.add(nftChangesItem);
    return this;
  }

   /**
   * Get nftChanges
   * @return nftChanges
  **/
  @Schema(description = "")
  public List<SolanaTxAssetChange> getNftChanges() {
    return nftChanges;
  }

  public void setNftChanges(List<SolanaTxAssetChange> nftChanges) {
    this.nftChanges = nftChanges;
  }

  public SolanaTxAssetChanges tokenChanges(List<SolanaTxAssetChange> tokenChanges) {
    this.tokenChanges = tokenChanges;
    return this;
  }

  public SolanaTxAssetChanges addTokenChangesItem(SolanaTxAssetChange tokenChangesItem) {
    if (this.tokenChanges == null) {
      this.tokenChanges = new ArrayList<SolanaTxAssetChange>();
    }
    this.tokenChanges.add(tokenChangesItem);
    return this;
  }

   /**
   * Get tokenChanges
   * @return tokenChanges
  **/
  @Schema(description = "")
  public List<SolanaTxAssetChange> getTokenChanges() {
    return tokenChanges;
  }

  public void setTokenChanges(List<SolanaTxAssetChange> tokenChanges) {
    this.tokenChanges = tokenChanges;
  }

  public SolanaTxAssetChanges solChanges(List<SolanaTxSolChange> solChanges) {
    this.solChanges = solChanges;
    return this;
  }

  public SolanaTxAssetChanges addSolChangesItem(SolanaTxSolChange solChangesItem) {
    if (this.solChanges == null) {
      this.solChanges = new ArrayList<SolanaTxSolChange>();
    }
    this.solChanges.add(solChangesItem);
    return this;
  }

   /**
   * Get solChanges
   * @return solChanges
  **/
  @Schema(description = "")
  public List<SolanaTxSolChange> getSolChanges() {
    return solChanges;
  }

  public void setSolChanges(List<SolanaTxSolChange> solChanges) {
    this.solChanges = solChanges;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolanaTxAssetChanges solanaTxAssetChanges = (SolanaTxAssetChanges) o;
    return Objects.equals(this.nftChanges, solanaTxAssetChanges.nftChanges) &&
        Objects.equals(this.tokenChanges, solanaTxAssetChanges.tokenChanges) &&
        Objects.equals(this.solChanges, solanaTxAssetChanges.solChanges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nftChanges, tokenChanges, solChanges);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolanaTxAssetChanges {\n");
    
    sb.append("    nftChanges: ").append(toIndentedString(nftChanges)).append("\n");
    sb.append("    tokenChanges: ").append(toIndentedString(tokenChanges)).append("\n");
    sb.append("    solChanges: ").append(toIndentedString(solChanges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

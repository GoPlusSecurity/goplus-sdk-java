/*
 * GoPlus Security API Document
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.gopluslabs.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityClosable;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityCreators;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityDex;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityFreezable;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityHolders;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityLpHolders;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityMetadata;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityMetadataMutable;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityMintable;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityTransferFee;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityTransferHook;
import io.gopluslabs.client.model.ResponseWrapperSolanaTokenSecurityTransferHookUpgradable;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * key is contract address
 */
@Schema(description = "key is contract address")


public class ResponseWrapperSolanaTokenSecurityResult {
  @SerializedName("metadata")
  private ResponseWrapperSolanaTokenSecurityMetadata metadata = null;

  @SerializedName("creators")
  private List<ResponseWrapperSolanaTokenSecurityCreators> creators = null;

  @SerializedName("lp_holders")
  private List<ResponseWrapperSolanaTokenSecurityLpHolders> lpHolders = null;

  @SerializedName("closable")
  private ResponseWrapperSolanaTokenSecurityClosable closable = null;

  @SerializedName("transfer_hook")
  private List<ResponseWrapperSolanaTokenSecurityTransferHook> transferHook = null;

  @SerializedName("transfer_hook_upgradable")
  private ResponseWrapperSolanaTokenSecurityTransferHookUpgradable transferHookUpgradable = null;

  @SerializedName("trusted_token")
  private Integer trustedToken = null;

  @SerializedName("default_account_state_upgradable")
  private ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable defaultAccountStateUpgradable = null;

  @SerializedName("none_transferable")
  private String noneTransferable = null;

  @SerializedName("default_account_state")
  private String defaultAccountState = null;

  @SerializedName("mintable")
  private ResponseWrapperSolanaTokenSecurityMintable mintable = null;

  @SerializedName("balance_mutable_authority")
  private ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority balanceMutableAuthority = null;

  @SerializedName("transfer_fee")
  private ResponseWrapperSolanaTokenSecurityTransferFee transferFee = null;

  @SerializedName("holders")
  private List<ResponseWrapperSolanaTokenSecurityHolders> holders = null;

  @SerializedName("freezable")
  private ResponseWrapperSolanaTokenSecurityFreezable freezable = null;

  @SerializedName("metadata_mutable")
  private ResponseWrapperSolanaTokenSecurityMetadataMutable metadataMutable = null;

  @SerializedName("dex")
  private List<ResponseWrapperSolanaTokenSecurityDex> dex = null;

  @SerializedName("transfer_fee_upgradable")
  private ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable transferFeeUpgradable = null;

  public ResponseWrapperSolanaTokenSecurityResult metadata(ResponseWrapperSolanaTokenSecurityMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ResponseWrapperSolanaTokenSecurityMetadata metadata) {
    this.metadata = metadata;
  }

  public ResponseWrapperSolanaTokenSecurityResult creators(List<ResponseWrapperSolanaTokenSecurityCreators> creators) {
    this.creators = creators;
    return this;
  }

  public ResponseWrapperSolanaTokenSecurityResult addCreatorsItem(ResponseWrapperSolanaTokenSecurityCreators creatorsItem) {
    if (this.creators == null) {
      this.creators = new ArrayList<ResponseWrapperSolanaTokenSecurityCreators>();
    }
    this.creators.add(creatorsItem);
    return this;
  }

   /**
   * Contains information about the token creators.
   * @return creators
  **/
  @Schema(description = "Contains information about the token creators.")
  public List<ResponseWrapperSolanaTokenSecurityCreators> getCreators() {
    return creators;
  }

  public void setCreators(List<ResponseWrapperSolanaTokenSecurityCreators> creators) {
    this.creators = creators;
  }

  public ResponseWrapperSolanaTokenSecurityResult lpHolders(List<ResponseWrapperSolanaTokenSecurityLpHolders> lpHolders) {
    this.lpHolders = lpHolders;
    return this;
  }

  public ResponseWrapperSolanaTokenSecurityResult addLpHoldersItem(ResponseWrapperSolanaTokenSecurityLpHolders lpHoldersItem) {
    if (this.lpHolders == null) {
      this.lpHolders = new ArrayList<ResponseWrapperSolanaTokenSecurityLpHolders>();
    }
    this.lpHolders.add(lpHoldersItem);
    return this;
  }

   /**
   * List of top10 liquidity holders and their balances of the largest main token(SOL, USDC, USDT) liquidity pool.
   * @return lpHolders
  **/
  @Schema(description = "List of top10 liquidity holders and their balances of the largest main token(SOL, USDC, USDT) liquidity pool.")
  public List<ResponseWrapperSolanaTokenSecurityLpHolders> getLpHolders() {
    return lpHolders;
  }

  public void setLpHolders(List<ResponseWrapperSolanaTokenSecurityLpHolders> lpHolders) {
    this.lpHolders = lpHolders;
  }

  public ResponseWrapperSolanaTokenSecurityResult closable(ResponseWrapperSolanaTokenSecurityClosable closable) {
    this.closable = closable;
    return this;
  }

   /**
   * Get closable
   * @return closable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityClosable getClosable() {
    return closable;
  }

  public void setClosable(ResponseWrapperSolanaTokenSecurityClosable closable) {
    this.closable = closable;
  }

  public ResponseWrapperSolanaTokenSecurityResult transferHook(List<ResponseWrapperSolanaTokenSecurityTransferHook> transferHook) {
    this.transferHook = transferHook;
    return this;
  }

  public ResponseWrapperSolanaTokenSecurityResult addTransferHookItem(ResponseWrapperSolanaTokenSecurityTransferHook transferHookItem) {
    if (this.transferHook == null) {
      this.transferHook = new ArrayList<ResponseWrapperSolanaTokenSecurityTransferHook>();
    }
    this.transferHook.add(transferHookItem);
    return this;
  }

   /**
   * If there is any external hook in the token programme.(Notice: Hook may block user from trading)
   * @return transferHook
  **/
  @Schema(description = "If there is any external hook in the token programme.(Notice: Hook may block user from trading)")
  public List<ResponseWrapperSolanaTokenSecurityTransferHook> getTransferHook() {
    return transferHook;
  }

  public void setTransferHook(List<ResponseWrapperSolanaTokenSecurityTransferHook> transferHook) {
    this.transferHook = transferHook;
  }

  public ResponseWrapperSolanaTokenSecurityResult transferHookUpgradable(ResponseWrapperSolanaTokenSecurityTransferHookUpgradable transferHookUpgradable) {
    this.transferHookUpgradable = transferHookUpgradable;
    return this;
  }

   /**
   * Get transferHookUpgradable
   * @return transferHookUpgradable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityTransferHookUpgradable getTransferHookUpgradable() {
    return transferHookUpgradable;
  }

  public void setTransferHookUpgradable(ResponseWrapperSolanaTokenSecurityTransferHookUpgradable transferHookUpgradable) {
    this.transferHookUpgradable = transferHookUpgradable;
  }

  public ResponseWrapperSolanaTokenSecurityResult trustedToken(Integer trustedToken) {
    this.trustedToken = trustedToken;
    return this;
  }

   /**
   * If the token is a famous and trustworthy one. \&quot;1\&quot; means yes.
   * @return trustedToken
  **/
  @Schema(description = "If the token is a famous and trustworthy one. \"1\" means yes.")
  public Integer getTrustedToken() {
    return trustedToken;
  }

  public void setTrustedToken(Integer trustedToken) {
    this.trustedToken = trustedToken;
  }

  public ResponseWrapperSolanaTokenSecurityResult defaultAccountStateUpgradable(ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable defaultAccountStateUpgradable) {
    this.defaultAccountStateUpgradable = defaultAccountStateUpgradable;
    return this;
  }

   /**
   * Get defaultAccountStateUpgradable
   * @return defaultAccountStateUpgradable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable getDefaultAccountStateUpgradable() {
    return defaultAccountStateUpgradable;
  }

  public void setDefaultAccountStateUpgradable(ResponseWrapperSolanaTokenSecurityDefaultAccountStateUpgradable defaultAccountStateUpgradable) {
    this.defaultAccountStateUpgradable = defaultAccountStateUpgradable;
  }

  public ResponseWrapperSolanaTokenSecurityResult noneTransferable(String noneTransferable) {
    this.noneTransferable = noneTransferable;
    return this;
  }

   /**
   * Indicates whether the token is non-transferable, \&quot;1\&quot; means non-transferable, \&quot;0\&quot; means transferable
   * @return noneTransferable
  **/
  @Schema(description = "Indicates whether the token is non-transferable, \"1\" means non-transferable, \"0\" means transferable")
  public String getNoneTransferable() {
    return noneTransferable;
  }

  public void setNoneTransferable(String noneTransferable) {
    this.noneTransferable = noneTransferable;
  }

  public ResponseWrapperSolanaTokenSecurityResult defaultAccountState(String defaultAccountState) {
    this.defaultAccountState = defaultAccountState;
    return this;
  }

   /**
   * The default state of newly created accounts. \&quot;0\&quot; for Uninitialized, \&quot;1\&quot; for Initialized, \&quot;2\&quot; for Frozen.(Notice: Uninitialized (0): The token is newly created and not ready for use. It cannot perform any token operations and typically needs to be initialized to become active. Initialized (1): The token is fully ready for use and can engage in normal token transactions. Most token operations require the account to be in this state. Frozen (2): All the account that created whe the token is \&quot;frozen\&quot; would be locked and prohibited from performing any token transactions or operations, usually for security or compliance reasons, until it is manually unfrozen.)
   * @return defaultAccountState
  **/
  @Schema(description = "The default state of newly created accounts. \"0\" for Uninitialized, \"1\" for Initialized, \"2\" for Frozen.(Notice: Uninitialized (0): The token is newly created and not ready for use. It cannot perform any token operations and typically needs to be initialized to become active. Initialized (1): The token is fully ready for use and can engage in normal token transactions. Most token operations require the account to be in this state. Frozen (2): All the account that created whe the token is \"frozen\" would be locked and prohibited from performing any token transactions or operations, usually for security or compliance reasons, until it is manually unfrozen.)")
  public String getDefaultAccountState() {
    return defaultAccountState;
  }

  public void setDefaultAccountState(String defaultAccountState) {
    this.defaultAccountState = defaultAccountState;
  }

  public ResponseWrapperSolanaTokenSecurityResult mintable(ResponseWrapperSolanaTokenSecurityMintable mintable) {
    this.mintable = mintable;
    return this;
  }

   /**
   * Get mintable
   * @return mintable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityMintable getMintable() {
    return mintable;
  }

  public void setMintable(ResponseWrapperSolanaTokenSecurityMintable mintable) {
    this.mintable = mintable;
  }

  public ResponseWrapperSolanaTokenSecurityResult balanceMutableAuthority(ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority balanceMutableAuthority) {
    this.balanceMutableAuthority = balanceMutableAuthority;
    return this;
  }

   /**
   * Get balanceMutableAuthority
   * @return balanceMutableAuthority
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority getBalanceMutableAuthority() {
    return balanceMutableAuthority;
  }

  public void setBalanceMutableAuthority(ResponseWrapperSolanaTokenSecurityBalanceMutableAuthority balanceMutableAuthority) {
    this.balanceMutableAuthority = balanceMutableAuthority;
  }

  public ResponseWrapperSolanaTokenSecurityResult transferFee(ResponseWrapperSolanaTokenSecurityTransferFee transferFee) {
    this.transferFee = transferFee;
    return this;
  }

   /**
   * Get transferFee
   * @return transferFee
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityTransferFee getTransferFee() {
    return transferFee;
  }

  public void setTransferFee(ResponseWrapperSolanaTokenSecurityTransferFee transferFee) {
    this.transferFee = transferFee;
  }

  public ResponseWrapperSolanaTokenSecurityResult holders(List<ResponseWrapperSolanaTokenSecurityHolders> holders) {
    this.holders = holders;
    return this;
  }

  public ResponseWrapperSolanaTokenSecurityResult addHoldersItem(ResponseWrapperSolanaTokenSecurityHolders holdersItem) {
    if (this.holders == null) {
      this.holders = new ArrayList<ResponseWrapperSolanaTokenSecurityHolders>();
    }
    this.holders.add(holdersItem);
    return this;
  }

   /**
   * List of top 10 addresses holding the token and their balances.
   * @return holders
  **/
  @Schema(description = "List of top 10 addresses holding the token and their balances.")
  public List<ResponseWrapperSolanaTokenSecurityHolders> getHolders() {
    return holders;
  }

  public void setHolders(List<ResponseWrapperSolanaTokenSecurityHolders> holders) {
    this.holders = holders;
  }

  public ResponseWrapperSolanaTokenSecurityResult freezable(ResponseWrapperSolanaTokenSecurityFreezable freezable) {
    this.freezable = freezable;
    return this;
  }

   /**
   * Get freezable
   * @return freezable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityFreezable getFreezable() {
    return freezable;
  }

  public void setFreezable(ResponseWrapperSolanaTokenSecurityFreezable freezable) {
    this.freezable = freezable;
  }

  public ResponseWrapperSolanaTokenSecurityResult metadataMutable(ResponseWrapperSolanaTokenSecurityMetadataMutable metadataMutable) {
    this.metadataMutable = metadataMutable;
    return this;
  }

   /**
   * Get metadataMutable
   * @return metadataMutable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityMetadataMutable getMetadataMutable() {
    return metadataMutable;
  }

  public void setMetadataMutable(ResponseWrapperSolanaTokenSecurityMetadataMutable metadataMutable) {
    this.metadataMutable = metadataMutable;
  }

  public ResponseWrapperSolanaTokenSecurityResult dex(List<ResponseWrapperSolanaTokenSecurityDex> dex) {
    this.dex = dex;
    return this;
  }

  public ResponseWrapperSolanaTokenSecurityResult addDexItem(ResponseWrapperSolanaTokenSecurityDex dexItem) {
    if (this.dex == null) {
      this.dex = new ArrayList<ResponseWrapperSolanaTokenSecurityDex>();
    }
    this.dex.add(dexItem);
    return this;
  }

   /**
   * Dex Info
   * @return dex
  **/
  @Schema(description = "Dex Info")
  public List<ResponseWrapperSolanaTokenSecurityDex> getDex() {
    return dex;
  }

  public void setDex(List<ResponseWrapperSolanaTokenSecurityDex> dex) {
    this.dex = dex;
  }

  public ResponseWrapperSolanaTokenSecurityResult transferFeeUpgradable(ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable transferFeeUpgradable) {
    this.transferFeeUpgradable = transferFeeUpgradable;
    return this;
  }

   /**
   * Get transferFeeUpgradable
   * @return transferFeeUpgradable
  **/
  @Schema(description = "")
  public ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable getTransferFeeUpgradable() {
    return transferFeeUpgradable;
  }

  public void setTransferFeeUpgradable(ResponseWrapperSolanaTokenSecurityTransferFeeUpgradable transferFeeUpgradable) {
    this.transferFeeUpgradable = transferFeeUpgradable;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseWrapperSolanaTokenSecurityResult responseWrapperSolanaTokenSecurityResult = (ResponseWrapperSolanaTokenSecurityResult) o;
    return Objects.equals(this.metadata, responseWrapperSolanaTokenSecurityResult.metadata) &&
        Objects.equals(this.creators, responseWrapperSolanaTokenSecurityResult.creators) &&
        Objects.equals(this.lpHolders, responseWrapperSolanaTokenSecurityResult.lpHolders) &&
        Objects.equals(this.closable, responseWrapperSolanaTokenSecurityResult.closable) &&
        Objects.equals(this.transferHook, responseWrapperSolanaTokenSecurityResult.transferHook) &&
        Objects.equals(this.transferHookUpgradable, responseWrapperSolanaTokenSecurityResult.transferHookUpgradable) &&
        Objects.equals(this.trustedToken, responseWrapperSolanaTokenSecurityResult.trustedToken) &&
        Objects.equals(this.defaultAccountStateUpgradable, responseWrapperSolanaTokenSecurityResult.defaultAccountStateUpgradable) &&
        Objects.equals(this.noneTransferable, responseWrapperSolanaTokenSecurityResult.noneTransferable) &&
        Objects.equals(this.defaultAccountState, responseWrapperSolanaTokenSecurityResult.defaultAccountState) &&
        Objects.equals(this.mintable, responseWrapperSolanaTokenSecurityResult.mintable) &&
        Objects.equals(this.balanceMutableAuthority, responseWrapperSolanaTokenSecurityResult.balanceMutableAuthority) &&
        Objects.equals(this.transferFee, responseWrapperSolanaTokenSecurityResult.transferFee) &&
        Objects.equals(this.holders, responseWrapperSolanaTokenSecurityResult.holders) &&
        Objects.equals(this.freezable, responseWrapperSolanaTokenSecurityResult.freezable) &&
        Objects.equals(this.metadataMutable, responseWrapperSolanaTokenSecurityResult.metadataMutable) &&
        Objects.equals(this.dex, responseWrapperSolanaTokenSecurityResult.dex) &&
        Objects.equals(this.transferFeeUpgradable, responseWrapperSolanaTokenSecurityResult.transferFeeUpgradable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, creators, lpHolders, closable, transferHook, transferHookUpgradable, trustedToken, defaultAccountStateUpgradable, noneTransferable, defaultAccountState, mintable, balanceMutableAuthority, transferFee, holders, freezable, metadataMutable, dex, transferFeeUpgradable);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseWrapperSolanaTokenSecurityResult {\n");
    
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    creators: ").append(toIndentedString(creators)).append("\n");
    sb.append("    lpHolders: ").append(toIndentedString(lpHolders)).append("\n");
    sb.append("    closable: ").append(toIndentedString(closable)).append("\n");
    sb.append("    transferHook: ").append(toIndentedString(transferHook)).append("\n");
    sb.append("    transferHookUpgradable: ").append(toIndentedString(transferHookUpgradable)).append("\n");
    sb.append("    trustedToken: ").append(toIndentedString(trustedToken)).append("\n");
    sb.append("    defaultAccountStateUpgradable: ").append(toIndentedString(defaultAccountStateUpgradable)).append("\n");
    sb.append("    noneTransferable: ").append(toIndentedString(noneTransferable)).append("\n");
    sb.append("    defaultAccountState: ").append(toIndentedString(defaultAccountState)).append("\n");
    sb.append("    mintable: ").append(toIndentedString(mintable)).append("\n");
    sb.append("    balanceMutableAuthority: ").append(toIndentedString(balanceMutableAuthority)).append("\n");
    sb.append("    transferFee: ").append(toIndentedString(transferFee)).append("\n");
    sb.append("    holders: ").append(toIndentedString(holders)).append("\n");
    sb.append("    freezable: ").append(toIndentedString(freezable)).append("\n");
    sb.append("    metadataMutable: ").append(toIndentedString(metadataMutable)).append("\n");
    sb.append("    dex: ").append(toIndentedString(dex)).append("\n");
    sb.append("    transferFeeUpgradable: ").append(toIndentedString(transferFeeUpgradable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
